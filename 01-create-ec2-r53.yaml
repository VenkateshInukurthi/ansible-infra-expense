# This playbook is to create EC2 instances and Route 53 records using Ansible
- name: Create EC2 and Route 53 records
  hosts: localhost
  connection: local
  vars:
    sg_id: sg-088988091b81eae5c
    subnet_id: subnet-04d82804a30fa7790
    ami_id: ami-09c813fb71547fc4f
    instances:
      - mysql
      - backend
      - frontend
    zone: laven.cloud
  tasks:
    - name: Install boto3 and botocore
      ansible.builtin.pip:
        name:
          - boto3
          - botocore
        executable: pip3.9

    - name: Create EC2 instances
      amazon.aws.ec2_instance:
        name: "{{ item }}"
        vpc_subnet_id: "{{ subnet_id }}"
        instance_type: "t3.micro"
        security_group: "{{ sg_id }}"
        image_id: "{{ ami_id }}"
      loop: "{{ instances }}"
      register: ec2_instances

    - name: Print EC2 instances
      ansible.builtin.debug:
        msg: "{{ ec2_instances }}"

    # Create private Route 53 records
    - name: Create private Route 53 records
      amazon.aws.route53:
        state: present
        zone: "{{ zone }}"
        record: "{{ item.item }}.{{ zone }}"
        type: "A"
        ttl: 1
        value: "{{ item.instances[0].private_ip_address }}"
        wait: true
        overwrite: true
      loop: "{{ ec2_instances.results }}"
      #when: item.item != frontend

    # Create public DNS record for frontend
    - name: Public DNS record for frontend
      vars:
        public_name: expense
      amazon.aws.route53:
        state: present
        zone: "{{ zone }}"
        record: "{{ public_name }}.{{ zone }}"
        type: "A"
        ttl: 1
        value: "{{ item.instances[0].public_ip_address }}"
        wait: true
        overwrite: true
      loop: "{{ ec2_instances.results }}"
      when: item.item == "frontend"

    # Additional tasks for checking instance status
    - name: Wait for EC2 instances to be running
      amazon.aws.ec2_instance_info:
        instance_ids: "{{ ec2_instances.results | map(attribute='instances') | map(attribute='id') | list }}"
      register: ec2_info
      until: ec2_info.instances | selectattr('state', 'eq', 'running') | list | length == ec2_instances.results | length
      retries: 10
      delay: 30

    - name: Print EC2 information
      ansible.builtin.debug:
        msg: "{{ ec2_info }}"

    # Additional security group tasks
    - name: Add SSH rule to security group
      amazon.aws.ec2_security_group:
        name: "{{ sg_id }}"
        description: "Allow SSH"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        state: present

    - name: Add HTTP rule to security group
      amazon.aws.ec2_security_group:
        name: "{{ sg_id }}"
        description: "Allow HTTP"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        state: present